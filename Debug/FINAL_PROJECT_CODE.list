
FINAL_PROJECT_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001848  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080019f0  080019f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080019f0  080019f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080019f0  080019f0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019f0  080019f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019f4  080019f4  000119f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080019f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000048  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001def  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000082a  00000000  00000000  00021e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00022660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000198  00000000  00000000  00022850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f2e  00000000  00000000  000229e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a23  00000000  00000000  00025916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b108  00000000  00000000  00028339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00033441  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000069c  00000000  00000000  00033494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000014 	.word	0x20000014
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080019d8 	.word	0x080019d8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000018 	.word	0x20000018
 80001e4:	080019d8 	.word	0x080019d8

080001e8 <delayMs>:
 *      Author: ranji
 */
#include "LCD_Header_file.h"

void delayMs(uint32_t n)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(; n>0;n--)
 80001f0:	e00d      	b.n	800020e <delayMs+0x26>
		for(i = 0;i<3195;i++);
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	e002      	b.n	80001fe <delayMs+0x16>
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000204:	4293      	cmp	r3, r2
 8000206:	d9f7      	bls.n	80001f8 <delayMs+0x10>
	for(; n>0;n--)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3b01      	subs	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1ee      	bne.n	80001f2 <delayMs+0xa>
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
	...

08000224 <LCD_Data>:

void LCD_Data(char data)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	//Register Select is set to 1 (Select data Register Allows User to send Data)
	GPIO_WriteToOutputPin(GPIOC, 0, 1);
 800022e:	2201      	movs	r2, #1
 8000230:	2100      	movs	r1, #0
 8000232:	4810      	ldr	r0, [pc, #64]	; (8000274 <LCD_Data+0x50>)
 8000234:	f000 fbb4 	bl	80009a0 <GPIO_WriteToOutputPin>

	//R/W Allows user to read or write to LCD for Reading 1 for writing 0
	GPIO_WriteToOutputPin(GPIOC, 1, 0);
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LCD_Data+0x50>)
 800023e:	f000 fbaf 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Calls the Character to ascii value converter function
	Char_to_Binary(data);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f8d7 	bl	80003f8 <Char_to_Binary>

	//Setting Enable pin to High
	GPIO_WriteToOutputPin(GPIOC, 2, 1);
 800024a:	2201      	movs	r2, #1
 800024c:	2102      	movs	r1, #2
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <LCD_Data+0x50>)
 8000250:	f000 fba6 	bl	80009a0 <GPIO_WriteToOutputPin>

	delayMs(10);
 8000254:	200a      	movs	r0, #10
 8000256:	f7ff ffc7 	bl	80001e8 <delayMs>

	//Enable Pin to Low
	GPIO_WriteToOutputPin(GPIOC, 2, 0);
 800025a:	2200      	movs	r2, #0
 800025c:	2102      	movs	r1, #2
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <LCD_Data+0x50>)
 8000260:	f000 fb9e 	bl	80009a0 <GPIO_WriteToOutputPin>

	delayMs(20);
 8000264:	2014      	movs	r0, #20
 8000266:	f7ff ffbf 	bl	80001e8 <delayMs>
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40020800 	.word	0x40020800

08000278 <LCD_Init>:

void LCD_Init()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	PORTS_Init();			//Ports Initialization
 800027c:	f000 f80e 	bl	800029c <PORTS_Init>

	LCD_command(0x1);		//Clear Display Screen
 8000280:	2001      	movs	r0, #1
 8000282:	f000 f87d 	bl	8000380 <LCD_command>

	LCD_command(0x38);		//Mode 2 lines
 8000286:	2038      	movs	r0, #56	; 0x38
 8000288:	f000 f87a 	bl	8000380 <LCD_command>

	LCD_command(0xF);		//Display On And Cursor Blinking
 800028c:	200f      	movs	r0, #15
 800028e:	f000 f877 	bl	8000380 <LCD_command>

	LCD_command(0x80);		//Force Cursor to Beginning of first Line
 8000292:	2080      	movs	r0, #128	; 0x80
 8000294:	f000 f874 	bl	8000380 <LCD_command>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <PORTS_Init>:
void PORTS_Init()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
	//RCC Clock Enable for PORT D and PORT C
	GPIO_PeriClockControl(GPIOD, ENABLE);
 80002a2:	2101      	movs	r1, #1
 80002a4:	4834      	ldr	r0, [pc, #208]	; (8000378 <PORTS_Init+0xdc>)
 80002a6:	f000 f8d3 	bl	8000450 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 80002aa:	2101      	movs	r1, #1
 80002ac:	4833      	ldr	r0, [pc, #204]	; (800037c <PORTS_Init+0xe0>)
 80002ae:	f000 f8cf 	bl	8000450 <GPIO_PeriClockControl>

	//Data Ports from DB0 to DB7

	GPIO_Handle_t gpioPD;
	gpioPD.pGPIOx = GPIOD;
 80002b2:	4b31      	ldr	r3, [pc, #196]	; (8000378 <PORTS_Init+0xdc>)
 80002b4:	60fb      	str	r3, [r7, #12]
	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	743b      	strb	r3, [r7, #16]
	gpioPD.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002ba:	2300      	movs	r3, #0
 80002bc:	753b      	strb	r3, [r7, #20]
	gpioPD.GPIO_PinConfig.GPIO_PinMode   = GPIO_MODE_OUT;
 80002be:	2301      	movs	r3, #1
 80002c0:	747b      	strb	r3, [r7, #17]
	gpioPD.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c2:	2300      	movs	r3, #0
 80002c4:	74fb      	strb	r3, [r7, #19]
	gpioPD.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80002c6:	2300      	movs	r3, #0
 80002c8:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&gpioPD);
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f9a6 	bl	8000620 <GPIO_Init>

	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&gpioPD);
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f99f 	bl	8000620 <GPIO_Init>

	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80002e2:	2302      	movs	r3, #2
 80002e4:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&gpioPD);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f998 	bl	8000620 <GPIO_Init>

	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80002f0:	2303      	movs	r3, #3
 80002f2:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&gpioPD);
 80002f4:	f107 030c 	add.w	r3, r7, #12
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f991 	bl	8000620 <GPIO_Init>

	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 80002fe:	2304      	movs	r3, #4
 8000300:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&gpioPD);
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f98a 	bl	8000620 <GPIO_Init>

	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800030c:	2305      	movs	r3, #5
 800030e:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&gpioPD);
 8000310:	f107 030c 	add.w	r3, r7, #12
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f983 	bl	8000620 <GPIO_Init>

	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800031a:	2306      	movs	r3, #6
 800031c:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&gpioPD);
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f97c 	bl	8000620 <GPIO_Init>

	gpioPD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000328:	2307      	movs	r3, #7
 800032a:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&gpioPD);
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f975 	bl	8000620 <GPIO_Init>

	//Ports for Register Select,Read/Write,Enable

	GPIO_Handle_t gpioPC;
	gpioPC.pGPIOx = GPIOC;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <PORTS_Init+0xe0>)
 8000338:	603b      	str	r3, [r7, #0]
	gpioPC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800033a:	2300      	movs	r3, #0
 800033c:	713b      	strb	r3, [r7, #4]
	gpioPC.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800033e:	2300      	movs	r3, #0
 8000340:	723b      	strb	r3, [r7, #8]
	gpioPC.GPIO_PinConfig.GPIO_PinMode   = GPIO_MODE_OUT;
 8000342:	2301      	movs	r3, #1
 8000344:	717b      	strb	r3, [r7, #5]
	gpioPC.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000346:	2300      	movs	r3, #0
 8000348:	71fb      	strb	r3, [r7, #7]
	gpioPC.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800034a:	2300      	movs	r3, #0
 800034c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&gpioPC);
 800034e:	463b      	mov	r3, r7
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f965 	bl	8000620 <GPIO_Init>

	gpioPC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 8000356:	2301      	movs	r3, #1
 8000358:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&gpioPC);
 800035a:	463b      	mov	r3, r7
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f95f 	bl	8000620 <GPIO_Init>

	gpioPC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000362:	2302      	movs	r3, #2
 8000364:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&gpioPC);
 8000366:	463b      	mov	r3, r7
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f959 	bl	8000620 <GPIO_Init>
}
 800036e:	bf00      	nop
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40020c00 	.word	0x40020c00
 800037c:	40020800 	.word	0x40020800

08000380 <LCD_command>:


void LCD_command(unsigned char data)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]

	int binary = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
	GPIO_WriteToOutputPin(GPIOC, 0, 0);		//Select Command Register RS = 0
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <LCD_command+0x70>)
 8000394:	f000 fb04 	bl	80009a0 <GPIO_WriteToOutputPin>

	for(uint8_t i = 0; i < 8 ;i++)
 8000398:	2300      	movs	r3, #0
 800039a:	73fb      	strb	r3, [r7, #15]
 800039c:	e010      	b.n	80003c0 <LCD_command+0x40>
	{
		binary = data % 2;
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
		data = data/2;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	085b      	lsrs	r3, r3, #1
 80003aa:	71fb      	strb	r3, [r7, #7]
		GPIO_WriteToOutputPin(GPIOD, i, binary);
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	4619      	mov	r1, r3
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <LCD_command+0x74>)
 80003b6:	f000 faf3 	bl	80009a0 <GPIO_WriteToOutputPin>
	for(uint8_t i = 0; i < 8 ;i++)
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	3301      	adds	r3, #1
 80003be:	73fb      	strb	r3, [r7, #15]
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
 80003c2:	2b07      	cmp	r3, #7
 80003c4:	d9eb      	bls.n	800039e <LCD_command+0x1e>
	}

	GPIO_WriteToOutputPin(GPIOC, 2, 1);		//Setting Enable Pin High
 80003c6:	2201      	movs	r2, #1
 80003c8:	2102      	movs	r1, #2
 80003ca:	4809      	ldr	r0, [pc, #36]	; (80003f0 <LCD_command+0x70>)
 80003cc:	f000 fae8 	bl	80009a0 <GPIO_WriteToOutputPin>

	delayMs(10);	//Delay for 10 ms
 80003d0:	200a      	movs	r0, #10
 80003d2:	f7ff ff09 	bl	80001e8 <delayMs>

	GPIO_WriteToOutputPin(GPIOC, 2, 0);		//Enable Pin to Low
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <LCD_command+0x70>)
 80003dc:	f000 fae0 	bl	80009a0 <GPIO_WriteToOutputPin>

	delayMs(20);	//Delay for 20 ms
 80003e0:	2014      	movs	r0, #20
 80003e2:	f7ff ff01 	bl	80001e8 <delayMs>

}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40020800 	.word	0x40020800
 80003f4:	40020c00 	.word	0x40020c00

080003f8 <Char_to_Binary>:

//Function to convert Character to Binary

void Char_to_Binary(char data)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
	int bin;
	char ch = data;
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	74fb      	strb	r3, [r7, #19]
	for (uint32_t i = 0; i < 8; i++)
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	e017      	b.n	800043c <Char_to_Binary+0x44>
	{
		bin = ((ch << i) & 0x80) ? 1 : 0;
 800040c:	7cfa      	ldrb	r2, [r7, #19]
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	fa02 f303 	lsl.w	r3, r2, r3
 8000414:	11db      	asrs	r3, r3, #7
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
		GPIO_WriteToOutputPin(GPIOD, (7-i), bin);
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	f1c3 0307 	rsb	r3, r3, #7
 8000424:	b2db      	uxtb	r3, r3
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	b2d2      	uxtb	r2, r2
 800042a:	4619      	mov	r1, r3
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <Char_to_Binary+0x54>)
 800042e:	f000 fab7 	bl	80009a0 <GPIO_WriteToOutputPin>
		bin = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < 8; i++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	2b07      	cmp	r3, #7
 8000440:	d9e4      	bls.n	800040c <Char_to_Binary+0x14>
	}
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40020c00 	.word	0x40020c00

08000450 <GPIO_PeriClockControl>:
 */

/**************************************@fn- GPIO_PeriClockControl***************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d162      	bne.n	8000528 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a64      	ldr	r2, [pc, #400]	; (80005f8 <GPIO_PeriClockControl+0x1a8>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800046a:	4b64      	ldr	r3, [pc, #400]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a63      	ldr	r2, [pc, #396]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000476:	e0b9      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a61      	ldr	r2, [pc, #388]	; (8000600 <GPIO_PeriClockControl+0x1b0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000480:	4b5e      	ldr	r3, [pc, #376]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a5d      	ldr	r2, [pc, #372]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000486:	f043 0302 	orr.w	r3, r3, #2
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e0ae      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a5c      	ldr	r2, [pc, #368]	; (8000604 <GPIO_PeriClockControl+0x1b4>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000496:	4b59      	ldr	r3, [pc, #356]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a58      	ldr	r2, [pc, #352]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800049c:	f043 0304 	orr.w	r3, r3, #4
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e0a3      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a58      	ldr	r2, [pc, #352]	; (8000608 <GPIO_PeriClockControl+0x1b8>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80004ac:	4b53      	ldr	r3, [pc, #332]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a52      	ldr	r2, [pc, #328]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e098      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a53      	ldr	r2, [pc, #332]	; (800060c <GPIO_PeriClockControl+0x1bc>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004c2:	4b4e      	ldr	r3, [pc, #312]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a4d      	ldr	r2, [pc, #308]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004c8:	f043 0310 	orr.w	r3, r3, #16
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e08d      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a4f      	ldr	r2, [pc, #316]	; (8000610 <GPIO_PeriClockControl+0x1c0>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004d8:	4b48      	ldr	r3, [pc, #288]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a47      	ldr	r2, [pc, #284]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004de:	f043 0320 	orr.w	r3, r3, #32
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e082      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a4a      	ldr	r2, [pc, #296]	; (8000614 <GPIO_PeriClockControl+0x1c4>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a42      	ldr	r2, [pc, #264]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80004f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e077      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a46      	ldr	r2, [pc, #280]	; (8000618 <GPIO_PeriClockControl+0x1c8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a3c      	ldr	r2, [pc, #240]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800050a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e06c      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a41      	ldr	r2, [pc, #260]	; (800061c <GPIO_PeriClockControl+0x1cc>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d168      	bne.n	80005ec <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800051a:	4b38      	ldr	r3, [pc, #224]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a37      	ldr	r2, [pc, #220]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	e061      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a33      	ldr	r2, [pc, #204]	; (80005f8 <GPIO_PeriClockControl+0x1a8>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000530:	4b32      	ldr	r3, [pc, #200]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a31      	ldr	r2, [pc, #196]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053c:	e056      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a2f      	ldr	r2, [pc, #188]	; (8000600 <GPIO_PeriClockControl+0x1b0>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a2c      	ldr	r2, [pc, #176]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800054c:	f023 0302 	bic.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000552:	e04b      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <GPIO_PeriClockControl+0x1b4>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a26      	ldr	r2, [pc, #152]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000562:	f023 0304 	bic.w	r3, r3, #4
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	e040      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a26      	ldr	r2, [pc, #152]	; (8000608 <GPIO_PeriClockControl+0x1b8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a21      	ldr	r2, [pc, #132]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 8000578:	f023 0308 	bic.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057e:	e035      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a22      	ldr	r2, [pc, #136]	; (800060c <GPIO_PeriClockControl+0x1bc>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d106      	bne.n	8000596 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 800058e:	f023 0310 	bic.w	r3, r3, #16
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e02a      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <GPIO_PeriClockControl+0x1c0>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005a4:	f023 0320 	bic.w	r3, r3, #32
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e01f      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a19      	ldr	r2, [pc, #100]	; (8000614 <GPIO_PeriClockControl+0x1c4>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e014      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <GPIO_PeriClockControl+0x1c8>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e009      	b.n	80005ec <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <GPIO_PeriClockControl+0x1cc>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d105      	bne.n	80005ec <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <GPIO_PeriClockControl+0x1ac>)
 80005e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020400 	.word	0x40020400
 8000604:	40020800 	.word	0x40020800
 8000608:	40020c00 	.word	0x40020c00
 800060c:	40021000 	.word	0x40021000
 8000610:	40021400 	.word	0x40021400
 8000614:	40021800 	.word	0x40021800
 8000618:	40021c00 	.word	0x40021c00
 800061c:	40022000 	.word	0x40022000

08000620 <GPIO_Init>:
 * Init and DeInit
 */
/**************************************@fn- GPIO_Init**************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]

	//Enable the peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2101      	movs	r1, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff0c 	bl	8000450 <GPIO_PeriClockControl>
	//1 Configure mode

	//pGPIOHandle->pGPIOx->MODER = 0x00000000; //This is bad, clears out modes for other pins every call


	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d820      	bhi.n	8000682 <GPIO_Init+0x62>
	{
		//the non-interrupt mode
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	795b      	ldrb	r3, [r3, #5]
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<  (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	2103      	movs	r1, #3
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	43db      	mvns	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	400a      	ands	r2, r1
 800066e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6819      	ldr	r1, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	430a      	orrs	r2, r1
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	e0cb      	b.n	800081a <GPIO_Init+0x1fa>

	}else
	{
		if( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber == GPIO_MODE_IT_FT )
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	2b04      	cmp	r3, #4
 8000688:	d117      	bne.n	80006ba <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800068a:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <GPIO_Init+0x198>)
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a47      	ldr	r2, [pc, #284]	; (80007b8 <GPIO_Init+0x198>)
 800069c:	430b      	orrs	r3, r1
 800069e:	60d3      	str	r3, [r2, #12]
			// Clear RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006a0:	4b45      	ldr	r3, [pc, #276]	; (80007b8 <GPIO_Init+0x198>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7912      	ldrb	r2, [r2, #4]
 80006a8:	4611      	mov	r1, r2
 80006aa:	2201      	movs	r2, #1
 80006ac:	408a      	lsls	r2, r1
 80006ae:	43d2      	mvns	r2, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a41      	ldr	r2, [pc, #260]	; (80007b8 <GPIO_Init+0x198>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	6093      	str	r3, [r2, #8]
 80006b8:	e035      	b.n	8000726 <GPIO_Init+0x106>

		}else if( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber == GPIO_MODE_IT_RT )
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	2b05      	cmp	r3, #5
 80006c0:	d117      	bne.n	80006f2 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006c2:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <GPIO_Init+0x198>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7912      	ldrb	r2, [r2, #4]
 80006ca:	4611      	mov	r1, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	408a      	lsls	r2, r1
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a39      	ldr	r2, [pc, #228]	; (80007b8 <GPIO_Init+0x198>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	6093      	str	r3, [r2, #8]
			// Clear RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006d8:	4b37      	ldr	r3, [pc, #220]	; (80007b8 <GPIO_Init+0x198>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	43d2      	mvns	r2, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a33      	ldr	r2, [pc, #204]	; (80007b8 <GPIO_Init+0x198>)
 80006ec:	400b      	ands	r3, r1
 80006ee:	60d3      	str	r3, [r2, #12]
 80006f0:	e019      	b.n	8000726 <GPIO_Init+0x106>
		}else if( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber == GPIO_MODE_IT_RFT )
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d115      	bne.n	8000726 <GPIO_Init+0x106>
		{
			// 1. configure both
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006fa:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <GPIO_Init+0x198>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	7912      	ldrb	r2, [r2, #4]
 8000702:	4611      	mov	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	408a      	lsls	r2, r1
 8000708:	4611      	mov	r1, r2
 800070a:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <GPIO_Init+0x198>)
 800070c:	430b      	orrs	r3, r1
 800070e:	60d3      	str	r3, [r2, #12]
			// Clear RTSR bit
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <GPIO_Init+0x198>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7912      	ldrb	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	4611      	mov	r1, r2
 8000720:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <GPIO_Init+0x198>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6093      	str	r3, [r2, #8]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	f003 0303 	and.w	r3, r3, #3
 8000736:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <GPIO_Init+0x19c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d04e      	beq.n	80007e0 <GPIO_Init+0x1c0>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <GPIO_Init+0x1a0>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d032      	beq.n	80007b2 <GPIO_Init+0x192>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <GPIO_Init+0x1a4>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d02b      	beq.n	80007ae <GPIO_Init+0x18e>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <GPIO_Init+0x1a8>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d024      	beq.n	80007aa <GPIO_Init+0x18a>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	; (80007cc <GPIO_Init+0x1ac>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d01d      	beq.n	80007a6 <GPIO_Init+0x186>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <GPIO_Init+0x1b0>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d016      	beq.n	80007a2 <GPIO_Init+0x182>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <GPIO_Init+0x1b4>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d00f      	beq.n	800079e <GPIO_Init+0x17e>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <GPIO_Init+0x1b8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d008      	beq.n	800079a <GPIO_Init+0x17a>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <GPIO_Init+0x1bc>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <GPIO_Init+0x176>
 8000792:	2308      	movs	r3, #8
 8000794:	e025      	b.n	80007e2 <GPIO_Init+0x1c2>
 8000796:	2300      	movs	r3, #0
 8000798:	e023      	b.n	80007e2 <GPIO_Init+0x1c2>
 800079a:	2307      	movs	r3, #7
 800079c:	e021      	b.n	80007e2 <GPIO_Init+0x1c2>
 800079e:	2306      	movs	r3, #6
 80007a0:	e01f      	b.n	80007e2 <GPIO_Init+0x1c2>
 80007a2:	2305      	movs	r3, #5
 80007a4:	e01d      	b.n	80007e2 <GPIO_Init+0x1c2>
 80007a6:	2304      	movs	r3, #4
 80007a8:	e01b      	b.n	80007e2 <GPIO_Init+0x1c2>
 80007aa:	2303      	movs	r3, #3
 80007ac:	e019      	b.n	80007e2 <GPIO_Init+0x1c2>
 80007ae:	2302      	movs	r3, #2
 80007b0:	e017      	b.n	80007e2 <GPIO_Init+0x1c2>
 80007b2:	2301      	movs	r3, #1
 80007b4:	e015      	b.n	80007e2 <GPIO_Init+0x1c2>
 80007b6:	bf00      	nop
 80007b8:	40013c00 	.word	0x40013c00
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40020400 	.word	0x40020400
 80007c4:	40020800 	.word	0x40020800
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40021400 	.word	0x40021400
 80007d4:	40021800 	.word	0x40021800
 80007d8:	40021c00 	.word	0x40021c00
 80007dc:	40022000 	.word	0x40022000
 80007e0:	2300      	movs	r3, #0
 80007e2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80007e4:	4b60      	ldr	r3, [pc, #384]	; (8000968 <GPIO_Init+0x348>)
 80007e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e8:	4a5f      	ldr	r2, [pc, #380]	; (8000968 <GPIO_Init+0x348>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80007f0:	7c7a      	ldrb	r2, [r7, #17]
 80007f2:	7cbb      	ldrb	r3, [r7, #18]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa02 f103 	lsl.w	r1, r2, r3
 80007fa:	4a5c      	ldr	r2, [pc, #368]	; (800096c <GPIO_Init+0x34c>)
 80007fc:	7cfb      	ldrb	r3, [r7, #19]
 80007fe:	3302      	adds	r3, #2
 8000800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000804:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <GPIO_Init+0x350>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	7912      	ldrb	r2, [r2, #4]
 800080c:	4611      	mov	r1, r2
 800080e:	2201      	movs	r2, #1
 8000810:	408a      	lsls	r2, r1
 8000812:	4611      	mov	r1, r2
 8000814:	4a56      	ldr	r2, [pc, #344]	; (8000970 <GPIO_Init+0x350>)
 8000816:	430b      	orrs	r3, r1
 8000818:	6013      	str	r3, [r2, #0]
	}


	temp = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

	//2 Configure speed
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	799b      	ldrb	r3, [r3, #6]
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<  (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); //instructor has 1 not 2
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2103      	movs	r1, #3
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	400a      	ands	r2, r1
 800084c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6899      	ldr	r1, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	430a      	orrs	r2, r1
 800085c:	609a      	str	r2, [r3, #8]


	temp = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

	//3 Configure pupd settings
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	79db      	ldrb	r3, [r3, #7]
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 <<  (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );//instructor has 1 not 2
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	791b      	ldrb	r3, [r3, #4]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	2103      	movs	r1, #3
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	4619      	mov	r1, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	400a      	ands	r2, r1
 8000890:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68d9      	ldr	r1, [r3, #12]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	430a      	orrs	r2, r1
 80008a0:	60da      	str	r2, [r3, #12]

	temp = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]

	//4 configure the optype
	temp = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) & ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	461a      	mov	r2, r3
 80008ac:	2301      	movs	r3, #1
 80008ae:	fa03 f202 	lsl.w	r2, r3, r2
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7a1b      	ldrb	r3, [r3, #8]
 80008b6:	4619      	mov	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	fa01 f303 	lsl.w	r3, r1, r3
 80008c0:	4013      	ands	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<  (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	4619      	mov	r1, r3
 80008d0:	2301      	movs	r3, #1
 80008d2:	408b      	lsls	r3, r1
 80008d4:	43db      	mvns	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	400a      	ands	r2, r1
 80008de:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6859      	ldr	r1, [r3, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	605a      	str	r2, [r3, #4]

	temp = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

	//5 configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	795b      	ldrb	r3, [r3, #5]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d131      	bne.n	8000960 <GPIO_Init+0x340>
	{
		//configure alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) );
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	7c3a      	ldrb	r2, [r7, #16]
 8000914:	3208      	adds	r2, #8
 8000916:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	220f      	movs	r2, #15
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	7c3a      	ldrb	r2, [r7, #16]
 800092e:	4001      	ands	r1, r0
 8000930:	3208      	adds	r2, #8
 8000932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	7c3a      	ldrb	r2, [r7, #16]
 800093c:	3208      	adds	r2, #8
 800093e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7a5b      	ldrb	r3, [r3, #9]
 8000946:	461a      	mov	r2, r3
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	4618      	mov	r0, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	7c3a      	ldrb	r2, [r7, #16]
 8000958:	4301      	orrs	r1, r0
 800095a:	3208      	adds	r2, #8
 800095c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40013800 	.word	0x40013800
 8000970:	40013c00 	.word	0x40013c00

08000974 <GPIO_ReadFromInputPin>:
 */

/*****************************************@fn- GPIO_ReadFromInputPin*********************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t) (( pGPIOx->IDR >> PinNumber ) & 0x00000001 );
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	691a      	ldr	r2, [r3, #16]
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	fa22 f303 	lsr.w	r3, r2, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]

	return value;
 8000992:	7bfb      	ldrb	r3, [r7, #15]

}
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <GPIO_WriteToOutputPin>:
}

/**********************************@fn- GPIO_WriteToOutputPin********************************/

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
 80009ac:	4613      	mov	r3, r2
 80009ae:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 80009b0:	78bb      	ldrb	r3, [r7, #2]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d109      	bne.n	80009ca <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the utput data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	78fa      	ldrb	r2, [r7, #3]
 80009bc:	2101      	movs	r1, #1
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	431a      	orrs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 80009c8:	e009      	b.n	80009de <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	78fa      	ldrb	r2, [r7, #3]
 80009d0:	2101      	movs	r1, #1
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	43d2      	mvns	r2, r2
 80009d8:	401a      	ands	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	615a      	str	r2, [r3, #20]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <RCC_GetPCLK1Value+0x9c>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000a00:	7a7b      	ldrb	r3, [r7, #9]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d102      	bne.n	8000a0c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <RCC_GetPCLK1Value+0xa0>)
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	e00b      	b.n	8000a24 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000a0c:	7a7b      	ldrb	r3, [r7, #9]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d102      	bne.n	8000a18 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <RCC_GetPCLK1Value+0xa4>)
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e005      	b.n	8000a24 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000a18:	7a7b      	ldrb	r3, [r7, #9]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d102      	bne.n	8000a24 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000a1e:	f000 f88d 	bl	8000b3c <RCC_GetPLLOutputClock>
 8000a22:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <RCC_GetPCLK1Value+0x9c>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	091b      	lsrs	r3, r3, #4
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 030f 	and.w	r3, r3, #15
 8000a30:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000a32:	7a3b      	ldrb	r3, [r7, #8]
 8000a34:	2b07      	cmp	r3, #7
 8000a36:	d802      	bhi.n	8000a3e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	72fb      	strb	r3, [r7, #11]
 8000a3c:	e005      	b.n	8000a4a <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000a3e:	7a3b      	ldrb	r3, [r7, #8]
 8000a40:	3b08      	subs	r3, #8
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <RCC_GetPCLK1Value+0xa8>)
 8000a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a48:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <RCC_GetPCLK1Value+0x9c>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	0a9b      	lsrs	r3, r3, #10
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000a58:	7a3b      	ldrb	r3, [r7, #8]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d802      	bhi.n	8000a64 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	72bb      	strb	r3, [r7, #10]
 8000a62:	e004      	b.n	8000a6e <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000a64:	7a3b      	ldrb	r3, [r7, #8]
 8000a66:	3b04      	subs	r3, #4
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <RCC_GetPCLK1Value+0xac>)
 8000a6a:	5cd3      	ldrb	r3, [r2, r3]
 8000a6c:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000a6e:	7afb      	ldrb	r3, [r7, #11]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a76:	7abb      	ldrb	r3, [r7, #10]
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a7e:	687b      	ldr	r3, [r7, #4]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	00f42400 	.word	0x00f42400
 8000a90:	007a1200 	.word	0x007a1200
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000010 	.word	0x20000010

08000a9c <RCC_GetPCLK2Value>:


/****************************************@fn- RCC_GetPCLK2Value*********************************/

uint32_t RCC_GetPCLK2Value(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <RCC_GetPCLK2Value+0x8c>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <RCC_GetPCLK2Value+0x90>)
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e001      	b.n	8000ac4 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <RCC_GetPCLK2Value+0x94>)
 8000ac2:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <RCC_GetPCLK2Value+0x8c>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	d802      	bhi.n	8000adc <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	72fb      	strb	r3, [r7, #11]
 8000ada:	e005      	b.n	8000ae8 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b08      	subs	r3, #8
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <RCC_GetPCLK2Value+0x98>)
 8000ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae6:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <RCC_GetPCLK2Value+0x8c>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	0b5b      	lsrs	r3, r3, #13
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d802      	bhi.n	8000b00 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	72bb      	strb	r3, [r7, #10]
 8000afe:	e004      	b.n	8000b0a <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b04      	subs	r3, #4
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <RCC_GetPCLK2Value+0x9c>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b12:	7abb      	ldrb	r3, [r7, #10]
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000b1a:	683b      	ldr	r3, [r7, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	00f42400 	.word	0x00f42400
 8000b30:	007a1200 	.word	0x007a1200
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000010 	.word	0x20000010

08000b3c <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

	return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <USART_SetBaudRate>:
#include "stm32f407xx_usart_driver.h"

/*****************************@fn- USART_SetBaudRate*************************/

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a31      	ldr	r2, [pc, #196]	; (8000c24 <USART_SetBaudRate+0xd8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d003      	beq.n	8000b6a <USART_SetBaudRate+0x1e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <USART_SetBaudRate+0xdc>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d103      	bne.n	8000b72 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000b6a:	f7ff ff97 	bl	8000a9c <RCC_GetPCLK2Value>
 8000b6e:	61f8      	str	r0, [r7, #28]
 8000b70:	e002      	b.n	8000b78 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000b72:	f7ff ff3b 	bl	80009ec <RCC_GetPCLK1Value>
 8000b76:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00b      	beq.n	8000b9c <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000b84:	69fa      	ldr	r2, [r7, #28]
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	009a      	lsls	r2, r3, #2
 8000b8e:	441a      	add	r2, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	e00a      	b.n	8000bb2 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	009a      	lsls	r2, r3, #2
 8000ba6:	441a      	add	r2, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <USART_SetBaudRate+0xe0>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2264      	movs	r2, #100	; 0x64
 8000bcc:	fb02 f303 	mul.w	r3, r2, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	3332      	adds	r3, #50	; 0x32
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <USART_SetBaudRate+0xe0>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e009      	b.n	8000c0c <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	3332      	adds	r3, #50	; 0x32
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <USART_SetBaudRate+0xe0>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	095b      	lsrs	r3, r3, #5
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	609a      	str	r2, [r3, #8]
}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40011000 	.word	0x40011000
 8000c28:	40011400 	.word	0x40011400
 8000c2c:	51eb851f 	.word	0x51eb851f

08000c30 <USART_Init>:

/*********************************@fn- USART_Init*************************/

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f894 	bl	8000d70 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e010      	b.n	8000c7c <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d104      	bne.n	8000c6c <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e007      	b.n	8000c7c <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d103      	bne.n	8000c7c <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f043 030c 	orr.w	r3, r3, #12
 8000c7a:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7b5b      	ldrb	r3, [r3, #13]
 8000c80:	031b      	lsls	r3, r3, #12
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]

    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7b9b      	ldrb	r3, [r3, #14]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d104      	bne.n	8000c9c <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	e00b      	b.n	8000cb4 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d107      	bne.n	8000cb4 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	60fb      	str	r3, [r7, #12]
	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7b1b      	ldrb	r3, [r3, #12]
 8000cc4:	031b      	lsls	r3, r3, #12
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7bdb      	ldrb	r3, [r3, #15]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d104      	bne.n	8000cec <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	e014      	b.n	8000d16 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7bdb      	ldrb	r3, [r3, #15]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d104      	bne.n	8000cfe <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00b      	b.n	8000d16 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7bdb      	ldrb	r3, [r3, #15]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d107      	bne.n	8000d16 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0c:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f7ff ff0f 	bl	8000b4c <USART_SetBaudRate>

}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <USART_PeripheralControl>:
/***********************************@fn- USART_EnableOrDisable******************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d106      	bne.n	8000d56 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000d54:	e005      	b.n	8000d62 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60da      	str	r2, [r3, #12]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <USART_PeriClockControl>:
/*******************************@fn- I2C_PeriClockControl****************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d140      	bne.n	8000e04 <USART_PeriClockControl+0x94>
	{
		if(pUSARTx == USART1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <USART_PeriClockControl+0xa0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d106      	bne.n	8000d98 <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 8000d8a:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8000d96:	e035      	b.n	8000e04 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <USART_PeriClockControl+0xa8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d106      	bne.n	8000dae <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dac:	e02a      	b.n	8000e04 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART3)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <USART_PeriClockControl+0xac>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d106      	bne.n	8000dc4 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dc2:	e01f      	b.n	8000e04 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART4)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <USART_PeriClockControl+0xb0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d106      	bne.n	8000dda <USART_PeriClockControl+0x6a>
			UART4_PCCK_EN();
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dd8:	e014      	b.n	8000e04 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART5)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <USART_PeriClockControl+0xb4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d106      	bne.n	8000df0 <USART_PeriClockControl+0x80>
			UART5_PCCK_EN();
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dee:	e009      	b.n	8000e04 <USART_PeriClockControl+0x94>
		else if (pUSARTx == USART6)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <USART_PeriClockControl+0xb8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d105      	bne.n	8000e04 <USART_PeriClockControl+0x94>
			USART6_PCCK_EN();
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <USART_PeriClockControl+0xa4>)
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	40004c00 	.word	0x40004c00
 8000e24:	40005000 	.word	0x40005000
 8000e28:	40011400 	.word	0x40011400

08000e2c <USART_GetFlagStatus>:
/*******************************************@fn- USART_GetFlagStatus******************************/

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <USART_SendData>:
 * @fn      		  - USART_SendData
 *
 * @Note              - Resolve all the TODOs
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e034      	b.n	8000ed2 <USART_SendData+0x7c>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000e68:	bf00      	nop
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffdb 	bl	8000e2c <USART_GetFlagStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f6      	beq.n	8000e6a <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	7b5b      	ldrb	r3, [r3, #13]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d11b      	bne.n	8000ebc <USART_SendData+0x66>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR |= (*pdata & (uint16_t)0x01FF);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	7b9b      	ldrb	r3, [r3, #14]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d106      	bne.n	8000eb4 <USART_SendData+0x5e>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	e00b      	b.n	8000ecc <USART_SendData+0x76>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	e007      	b.n	8000ecc <USART_SendData+0x76>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d3c6      	bcc.n	8000e68 <USART_SendData+0x12>
		}
	}
	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000eda:	bf00      	nop
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffa2 	bl	8000e2c <USART_GetFlagStatus>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f6      	beq.n	8000edc <USART_SendData+0x86>
}
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <USART_ReceiveDataIT>:
/*********************************************************************
 * @fn      		  - USART_ReceiveDataWithIT
 * @Note              -
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f0a:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d014      	beq.n	8000f3c <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	60da      	str	r2, [r3, #12]
	}
	return rxstate;
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	371c      	adds	r7, #28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <USART_IRQInterruptConfig>:
/*********************************************************************
 * @fn      		  - USART_IRQInterruptConfig
 * @Note              -
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d133      	bne.n	8000fca <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b1f      	cmp	r3, #31
 8000f66:	d80a      	bhi.n	8000f7e <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <USART_IRQInterruptConfig+0xf4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	4611      	mov	r1, r2
 8000f76:	4a32      	ldr	r2, [pc, #200]	; (8001040 <USART_IRQInterruptConfig+0xf4>)
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000f7c:	e059      	b.n	8001032 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b1f      	cmp	r3, #31
 8000f82:	d90f      	bls.n	8000fa4 <USART_IRQInterruptConfig+0x58>
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b3f      	cmp	r3, #63	; 0x3f
 8000f88:	d80c      	bhi.n	8000fa4 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <USART_IRQInterruptConfig+0xf8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	f002 021f 	and.w	r2, r2, #31
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <USART_IRQInterruptConfig+0xf8>)
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e046      	b.n	8001032 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa8:	d943      	bls.n	8001032 <USART_IRQInterruptConfig+0xe6>
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b5f      	cmp	r3, #95	; 0x5f
 8000fae:	d840      	bhi.n	8001032 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <USART_IRQInterruptConfig+0xfc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fba:	2101      	movs	r1, #1
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <USART_IRQInterruptConfig+0xfc>)
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	e033      	b.n	8001032 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b1f      	cmp	r3, #31
 8000fce:	d80a      	bhi.n	8000fe6 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <USART_IRQInterruptConfig+0x100>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4a1b      	ldr	r2, [pc, #108]	; (800104c <USART_IRQInterruptConfig+0x100>)
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	e025      	b.n	8001032 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b1f      	cmp	r3, #31
 8000fea:	d90f      	bls.n	800100c <USART_IRQInterruptConfig+0xc0>
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff0:	d80c      	bhi.n	800100c <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <USART_IRQInterruptConfig+0x104>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	f002 021f 	and.w	r2, r2, #31
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	4611      	mov	r1, r2
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <USART_IRQInterruptConfig+0x104>)
 8001006:	430b      	orrs	r3, r1
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e012      	b.n	8001032 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d90f      	bls.n	8001032 <USART_IRQInterruptConfig+0xe6>
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b5f      	cmp	r3, #95	; 0x5f
 8001016:	d80c      	bhi.n	8001032 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <USART_IRQInterruptConfig+0x108>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	4611      	mov	r1, r2
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <USART_IRQInterruptConfig+0x108>)
 800102c:	430b      	orrs	r3, r1
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	e7ff      	b.n	8001032 <USART_IRQInterruptConfig+0xe6>
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000e104 	.word	0xe000e104
 8001048:	e000e10c 	.word	0xe000e10c
 800104c:	e000e180 	.word	0xe000e180
 8001050:	e000e184 	.word	0xe000e184
 8001054:	e000e18c 	.word	0xe000e18c

08001058 <USART_IRQPriorityConfig>:
/*********************************************************************
 * @fn      		  - USART_IRQPriorityConfig
 * @Note              -
 */
void USART_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	3304      	adds	r3, #4
 800107a:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001084:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001088:	6819      	ldr	r1, [r3, #0]
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	409a      	lsls	r2, r3
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001098:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <USART_IRQHandling>:
/*********************************************************************
 * @fn      		  - USART_IRQHandler
 * @Note              -
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ca:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d021      	beq.n	8001116 <USART_IRQHandling+0x6a>
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01e      	beq.n	8001116 <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d119      	bne.n	8001116 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d115      	bne.n	8001116 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010f8:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 800110e:	2100      	movs	r1, #0
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fbfb 	bl	800190c <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001120:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112c:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d055      	beq.n	80011e0 <USART_IRQHandling+0x134>
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d052      	beq.n	80011e0 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d14d      	bne.n	80011e0 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d03d      	beq.n	80011c8 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7b5b      	ldrb	r3, [r3, #13]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d129      	bne.n	80011a8 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001168:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7b9b      	ldrb	r3, [r3, #14]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10f      	bne.n	8001192 <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	1e9a      	subs	r2, r3, #2
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
 8001190:	e01a      	b.n	80011c8 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
 80011a6:	e00f      	b.n	80011c8 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d107      	bne.n	80011e0 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011de:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d073      	beq.n	80012e6 <USART_IRQHandling+0x23a>
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d070      	beq.n	80012e6 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800120a:	2b01      	cmp	r3, #1
 800120c:	d16b      	bne.n	80012e6 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d053      	beq.n	80012be <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7b5b      	ldrb	r3, [r3, #13]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d12f      	bne.n	800127e <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b9b      	ldrb	r3, [r3, #14]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d119      	bne.n	800125a <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001236:	b292      	uxth	r2, r2
 8001238:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	1e9a      	subs	r2, r3, #2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	61da      	str	r2, [r3, #28]
 8001258:	e031      	b.n	80012be <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	61da      	str	r2, [r3, #28]
 800127c:	e01f      	b.n	80012be <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7b9b      	ldrb	r3, [r3, #14]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d107      	bne.n	8001296 <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e009      	b.n	80012aa <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0220 	bic.w	r2, r2, #32
 80012d4:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 80012de:	2101      	movs	r1, #1
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fb13 	bl	800190c <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f0:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fc:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001308:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00e      	beq.n	800132e <USART_IRQHandling+0x282>
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001324:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8001326:	2103      	movs	r1, #3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 faef 	bl	800190c <USART_ApplicationEventCallback>
	(void)temp3;

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00f      	beq.n	800136c <USART_IRQHandling+0x2c0>
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00c      	beq.n	800136c <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	f023 0310 	bic.w	r3, r3, #16
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001364:	2102      	movs	r1, #2
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fad0 	bl	800190c <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f003 0305 	and.w	r3, r3, #5
 8001382:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <USART_IRQHandling+0x2ec>
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001390:	2107      	movs	r1, #7
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 faba 	bl	800190c <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	613b      	str	r3, [r7, #16]

	if(temp2 )
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01e      	beq.n	80013e8 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 80013bc:	2105      	movs	r1, #5
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 faa4 	bl	800190c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 80013ce:	2106      	movs	r1, #6
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fa9b 	bl	800190c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80013e0:	2107      	movs	r1, #7
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fa92 	bl	800190c <USART_ApplicationEventCallback>
		}
	}


}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <main>:
uint8_t mssg[1];
uint8_t BtnPrsd = 0;
uint8_t msg[1];

int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2026      	movs	r0, #38	; 0x26
 80013fa:	f7ff fda7 	bl	8000f4c <USART_IRQInterruptConfig>
	USART_IRQPriorityConfig(IRQ_NO_USART2, 0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2026      	movs	r0, #38	; 0x26
 8001402:	f7ff fe29 	bl	8001058 <USART_IRQPriorityConfig>
	uint8_t msg1[1];
	LCD_Init();				//LCD Initialization
 8001406:	f7fe ff37 	bl	8000278 <LCD_Init>
	USART2_Init();			//USART Initialization
 800140a:	f000 f8f3 	bl	80015f4 <USART2_Init>
	USART2_GPIOInit();		//USART to GPIO Initialization
 800140e:	f000 f8cb 	bl	80015a8 <USART2_GPIOInit>
	GPIO_ButtonInit();		//Initialization of pins for Keypad
 8001412:	f000 f85d 	bl	80014d0 <GPIO_ButtonInit>
	USART_PeriClockControl(USART2, ENABLE);
 8001416:	2101      	movs	r1, #1
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <main+0x9c>)
 800141a:	f7ff fca9 	bl	8000d70 <USART_PeriClockControl>
	USART_PeripheralControl(USART2, ENABLE);
 800141e:	2101      	movs	r1, #1
 8001420:	481a      	ldr	r0, [pc, #104]	; (800148c <main+0x9c>)
 8001422:	f7ff fc88 	bl	8000d36 <USART_PeripheralControl>


	USART_ReceiveDataIT(&usart2_handle, (uint8_t *)msg, 1);//UART2 Receive Interrupt
 8001426:	2201      	movs	r2, #1
 8001428:	4919      	ldr	r1, [pc, #100]	; (8001490 <main+0xa0>)
 800142a:	481a      	ldr	r0, [pc, #104]	; (8001494 <main+0xa4>)
 800142c:	f7ff fd64 	bl	8000ef8 <USART_ReceiveDataIT>

	while(1)
	{
		mssg[0] = Keypad_Btn_Press();	//Detect Keypad Button Press.
 8001430:	f000 f902 	bl	8001638 <Keypad_Btn_Press>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <main+0xa8>)
 800143a:	701a      	strb	r2, [r3, #0]

		if(BtnPrsd == 1)	//Transmit the data if Keypad is Pressed.
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <main+0xac>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d1f5      	bne.n	8001430 <main+0x40>
		{
			for(uint8_t i = 0;i < 1; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	e01b      	b.n	8001482 <main+0x92>
			{
				GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, SET);
 800144a:	2201      	movs	r2, #1
 800144c:	210c      	movs	r1, #12
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <main+0xb0>)
 8001450:	f7ff faa6 	bl	80009a0 <GPIO_WriteToOutputPin>
				msg1[0] = mssg[i];
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <main+0xa8>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	713b      	strb	r3, [r7, #4]
				USART_SendData(&usart2_handle, (uint8_t*)msg1, 1);	//Use of USART to Transmit the Data Received from Keypad.
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <main+0xa4>)
 8001464:	f7ff fcf7 	bl	8000e56 <USART_SendData>
				delay();
 8001468:	f000 f81c 	bl	80014a4 <delay>
				GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	210c      	movs	r1, #12
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <main+0xb0>)
 8001472:	f7ff fa95 	bl	80009a0 <GPIO_WriteToOutputPin>
				BtnPrsd = 0;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <main+0xac>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0;i < 1; i++)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3301      	adds	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0e0      	beq.n	800144a <main+0x5a>
		mssg[0] = Keypad_Btn_Press();	//Detect Keypad Button Press.
 8001488:	e7d2      	b.n	8001430 <main+0x40>
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400
 8001490:	20000058 	.word	0x20000058
 8001494:	20000030 	.word	0x20000030
 8001498:	20000054 	.word	0x20000054
 800149c:	20000055 	.word	0x20000055
 80014a0:	40020c00 	.word	0x40020c00

080014a4 <delay>:
			}
		}
	}
}
void delay()
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 450000; i++);
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e002      	b.n	80014b6 <delay+0x12>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <delay+0x28>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d9f8      	bls.n	80014b0 <delay+0xc>
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	0006ddcf 	.word	0x0006ddcf

080014d0 <GPIO_ButtonInit>:
void GPIO_ButtonInit()
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
	//Clock Enable for GPIOD peripheral
	GPIO_PeriClockControl(GPIOD, ENABLE);
 80014d6:	2101      	movs	r1, #1
 80014d8:	4832      	ldr	r0, [pc, #200]	; (80015a4 <GPIO_ButtonInit+0xd4>)
 80014da:	f7fe ffb9 	bl	8000450 <GPIO_PeriClockControl>

	//GPIO Initialization of Port D pin 12 for Green Led Configuration
	GPIO_Handle_t gpioled;

	gpioled.pGPIOx = GPIOD;
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <GPIO_ButtonInit+0xd4>)
 80014e0:	61fb      	str	r3, [r7, #28]
	gpioled.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	gpioled.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80014e8:	230c      	movs	r3, #12
 80014ea:	f887 3020 	strb.w	r3, [r7, #32]
	gpioled.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	gpioled.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	gpioled.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GPIO_Init(&gpioled);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f88b 	bl	8000620 <GPIO_Init>

	//Pin Configuration for PD0 to PD3 as Output Mode connected to R1-R4 of Keypad

	GPIO_Handle_t gpioPDR;
	gpioPDR.pGPIOx = GPIOD;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <GPIO_ButtonInit+0xd4>)
 800150c:	613b      	str	r3, [r7, #16]
	gpioPDR.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800150e:	2301      	movs	r3, #1
 8001510:	757b      	strb	r3, [r7, #21]
	gpioPDR.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001512:	2300      	movs	r3, #0
 8001514:	763b      	strb	r3, [r7, #24]
	gpioPDR.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
	gpioPDR.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800151a:	2302      	movs	r3, #2
 800151c:	75bb      	strb	r3, [r7, #22]
	gpioPDR.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800151e:	2300      	movs	r3, #0
 8001520:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&gpioPDR);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f87a 	bl	8000620 <GPIO_Init>

	gpioPDR.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 800152c:	2301      	movs	r3, #1
 800152e:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&gpioPDR);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f873 	bl	8000620 <GPIO_Init>

	gpioPDR.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800153a:	2302      	movs	r3, #2
 800153c:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&gpioPDR);
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f86c 	bl	8000620 <GPIO_Init>

	gpioPDR.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8001548:	2303      	movs	r3, #3
 800154a:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&gpioPDR);
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f865 	bl	8000620 <GPIO_Init>

	//Pin Configuration for PD8 to PD11 as Input Mode with Pull resistors connected to C1 to C4 of Keypad

	GPIO_Handle_t gpioPDC;
	gpioPDC.pGPIOx = GPIOD;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <GPIO_ButtonInit+0xd4>)
 8001558:	607b      	str	r3, [r7, #4]
	gpioPDC.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800155a:	2300      	movs	r3, #0
 800155c:	727b      	strb	r3, [r7, #9]
	gpioPDC.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800155e:	2300      	movs	r3, #0
 8001560:	733b      	strb	r3, [r7, #12]
	gpioPDC.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001562:	2301      	movs	r3, #1
 8001564:	72fb      	strb	r3, [r7, #11]
	gpioPDC.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001566:	2302      	movs	r3, #2
 8001568:	72bb      	strb	r3, [r7, #10]
	gpioPDC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 800156a:	2308      	movs	r3, #8
 800156c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpioPDC);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f855 	bl	8000620 <GPIO_Init>

	gpioPDC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8001576:	2309      	movs	r3, #9
 8001578:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpioPDC);
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f84f 	bl	8000620 <GPIO_Init>

	gpioPDC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8001582:	230a      	movs	r3, #10
 8001584:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpioPDC);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f849 	bl	8000620 <GPIO_Init>

	gpioPDC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 800158e:	230b      	movs	r3, #11
 8001590:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpioPDC);
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff f843 	bl	8000620 <GPIO_Init>


}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020c00 	.word	0x40020c00

080015a8 <USART2_GPIOInit>:
void USART2_GPIOInit()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOA, ENABLE);
 80015ae:	2101      	movs	r1, #1
 80015b0:	480f      	ldr	r0, [pc, #60]	; (80015f0 <USART2_GPIOInit+0x48>)
 80015b2:	f7fe ff4d 	bl	8000450 <GPIO_PeriClockControl>

	//For Transmission
	GPIO_Handle_t usart_gpioPA;
	usart_gpioPA.pGPIOx = GPIOA;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <USART2_GPIOInit+0x48>)
 80015b8:	607b      	str	r3, [r7, #4]
	usart_gpioPA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80015ba:	2302      	movs	r3, #2
 80015bc:	727b      	strb	r3, [r7, #9]
	usart_gpioPA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80015be:	2300      	movs	r3, #0
 80015c0:	733b      	strb	r3, [r7, #12]
	usart_gpioPA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80015c2:	2301      	movs	r3, #1
 80015c4:	72fb      	strb	r3, [r7, #11]
	usart_gpioPA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80015c6:	2302      	movs	r3, #2
 80015c8:	72bb      	strb	r3, [r7, #10]
	usart_gpioPA.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 80015ca:	2307      	movs	r3, #7
 80015cc:	737b      	strb	r3, [r7, #13]
	usart_gpioPA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpioPA);
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff f823 	bl	8000620 <GPIO_Init>

	//For Receiver
	usart_gpioPA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80015da:	2303      	movs	r3, #3
 80015dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpioPA);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f81d 	bl	8000620 <GPIO_Init>
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020000 	.word	0x40020000

080015f4 <USART2_Init>:
void USART2_Init()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <USART2_Init+0x3c>)
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <USART2_Init+0x40>)
 80015fc:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_1200;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <USART2_Init+0x3c>)
 8001600:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001604:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <USART2_Init+0x3c>)
 8001608:	2202      	movs	r2, #2
 800160a:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <USART2_Init+0x3c>)
 800160e:	2200      	movs	r2, #0
 8001610:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <USART2_Init+0x3c>)
 8001614:	2200      	movs	r2, #0
 8001616:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <USART2_Init+0x3c>)
 800161a:	2200      	movs	r2, #0
 800161c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <USART2_Init+0x3c>)
 8001620:	2200      	movs	r2, #0
 8001622:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <USART2_Init+0x3c>)
 8001626:	f7ff fb03 	bl	8000c30 <USART_Init>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000030 	.word	0x20000030
 8001634:	40004400 	.word	0x40004400

08001638 <Keypad_Btn_Press>:
uint8_t Keypad_Btn_Press()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	//Make all rows High
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_0, SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2100      	movs	r1, #0
 8001640:	48aa      	ldr	r0, [pc, #680]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001642:	f7ff f9ad 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_1, SET);
 8001646:	2201      	movs	r2, #1
 8001648:	2101      	movs	r1, #1
 800164a:	48a8      	ldr	r0, [pc, #672]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800164c:	f7ff f9a8 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_2, SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2102      	movs	r1, #2
 8001654:	48a5      	ldr	r0, [pc, #660]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001656:	f7ff f9a3 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_3, SET);
 800165a:	2201      	movs	r2, #1
 800165c:	2103      	movs	r1, #3
 800165e:	48a3      	ldr	r0, [pc, #652]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001660:	f7ff f99e 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Make R1 low
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_0, RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	48a0      	ldr	r0, [pc, #640]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800166a:	f7ff f999 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Scanning for C1 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_8)))
 800166e:	2108      	movs	r1, #8
 8001670:	489e      	ldr	r0, [pc, #632]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001672:	f7ff f97f 	bl	8000974 <GPIO_ReadFromInputPin>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d107      	bne.n	800168c <Keypad_Btn_Press+0x54>
	{
		delay();
 800167c:	f7ff ff12 	bl	80014a4 <delay>
		mssg[0] = '1';
 8001680:	4b9b      	ldr	r3, [pc, #620]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 8001682:	2231      	movs	r2, #49	; 0x31
 8001684:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 8001686:	4b9b      	ldr	r3, [pc, #620]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C2 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_9)))
 800168c:	2109      	movs	r1, #9
 800168e:	4897      	ldr	r0, [pc, #604]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001690:	f7ff f970 	bl	8000974 <GPIO_ReadFromInputPin>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <Keypad_Btn_Press+0x72>
	{
		delay();
 800169a:	f7ff ff03 	bl	80014a4 <delay>
		mssg[0] = '2';
 800169e:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80016a0:	2232      	movs	r2, #50	; 0x32
 80016a2:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80016a4:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C3 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_10)))
 80016aa:	210a      	movs	r1, #10
 80016ac:	488f      	ldr	r0, [pc, #572]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80016ae:	f7ff f961 	bl	8000974 <GPIO_ReadFromInputPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d107      	bne.n	80016c8 <Keypad_Btn_Press+0x90>
	{
		delay();
 80016b8:	f7ff fef4 	bl	80014a4 <delay>
		mssg[0] = '3';
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80016be:	2233      	movs	r2, #51	; 0x33
 80016c0:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80016c2:	4b8c      	ldr	r3, [pc, #560]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C4 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_11)))
 80016c8:	210b      	movs	r1, #11
 80016ca:	4888      	ldr	r0, [pc, #544]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80016cc:	f7ff f952 	bl	8000974 <GPIO_ReadFromInputPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <Keypad_Btn_Press+0xae>
	{
		delay();
 80016d6:	f7ff fee5 	bl	80014a4 <delay>
		mssg[0] = 'A';
 80016da:	4b85      	ldr	r3, [pc, #532]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80016dc:	2241      	movs	r2, #65	; 0x41
 80016de:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80016e0:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
	}

	//Make All rows High
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_0, SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2100      	movs	r1, #0
 80016ea:	4880      	ldr	r0, [pc, #512]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80016ec:	f7ff f958 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_1, SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2101      	movs	r1, #1
 80016f4:	487d      	ldr	r0, [pc, #500]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80016f6:	f7ff f953 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_2, SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2102      	movs	r1, #2
 80016fe:	487b      	ldr	r0, [pc, #492]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001700:	f7ff f94e 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_3, SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2103      	movs	r1, #3
 8001708:	4878      	ldr	r0, [pc, #480]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800170a:	f7ff f949 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Make R2 Row Low
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_1, RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2101      	movs	r1, #1
 8001712:	4876      	ldr	r0, [pc, #472]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001714:	f7ff f944 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Scanning for C1 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_8)))
 8001718:	2108      	movs	r1, #8
 800171a:	4874      	ldr	r0, [pc, #464]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800171c:	f7ff f92a 	bl	8000974 <GPIO_ReadFromInputPin>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <Keypad_Btn_Press+0xfe>
	{
		delay();
 8001726:	f7ff febd 	bl	80014a4 <delay>
		mssg[0] = '4';
 800172a:	4b71      	ldr	r3, [pc, #452]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 800172c:	2234      	movs	r2, #52	; 0x34
 800172e:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C2 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_9)))
 8001736:	2109      	movs	r1, #9
 8001738:	486c      	ldr	r0, [pc, #432]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800173a:	f7ff f91b 	bl	8000974 <GPIO_ReadFromInputPin>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d107      	bne.n	8001754 <Keypad_Btn_Press+0x11c>
	{
		delay();
 8001744:	f7ff feae 	bl	80014a4 <delay>
		mssg[0] = '5';
 8001748:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 800174a:	2235      	movs	r2, #53	; 0x35
 800174c:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C3 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_10)))
 8001754:	210a      	movs	r1, #10
 8001756:	4865      	ldr	r0, [pc, #404]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001758:	f7ff f90c 	bl	8000974 <GPIO_ReadFromInputPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <Keypad_Btn_Press+0x13a>
	{
		delay();
 8001762:	f7ff fe9f 	bl	80014a4 <delay>
		mssg[0] = '6';
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 8001768:	2236      	movs	r2, #54	; 0x36
 800176a:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 800176c:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C4 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_11)))
 8001772:	210b      	movs	r1, #11
 8001774:	485d      	ldr	r0, [pc, #372]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001776:	f7ff f8fd 	bl	8000974 <GPIO_ReadFromInputPin>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <Keypad_Btn_Press+0x158>
	{
		delay();
 8001780:	f7ff fe90 	bl	80014a4 <delay>
		mssg[0] = 'B';
 8001784:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 8001786:	2242      	movs	r2, #66	; 0x42
 8001788:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 800178a:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
	}

	//Make All rows High
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_0, SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2100      	movs	r1, #0
 8001794:	4855      	ldr	r0, [pc, #340]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001796:	f7ff f903 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_1, SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2101      	movs	r1, #1
 800179e:	4853      	ldr	r0, [pc, #332]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80017a0:	f7ff f8fe 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_2, SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2102      	movs	r1, #2
 80017a8:	4850      	ldr	r0, [pc, #320]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80017aa:	f7ff f8f9 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_3, SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2103      	movs	r1, #3
 80017b2:	484e      	ldr	r0, [pc, #312]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80017b4:	f7ff f8f4 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Make R3 Row Low
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_2, RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2102      	movs	r1, #2
 80017bc:	484b      	ldr	r0, [pc, #300]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80017be:	f7ff f8ef 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Scanning for C1 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_8)))
 80017c2:	2108      	movs	r1, #8
 80017c4:	4849      	ldr	r0, [pc, #292]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80017c6:	f7ff f8d5 	bl	8000974 <GPIO_ReadFromInputPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <Keypad_Btn_Press+0x1a8>
	{
		delay();
 80017d0:	f7ff fe68 	bl	80014a4 <delay>
		mssg[0] = '7';
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80017d6:	2237      	movs	r2, #55	; 0x37
 80017d8:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C2 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_9)))
 80017e0:	2109      	movs	r1, #9
 80017e2:	4842      	ldr	r0, [pc, #264]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80017e4:	f7ff f8c6 	bl	8000974 <GPIO_ReadFromInputPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d107      	bne.n	80017fe <Keypad_Btn_Press+0x1c6>
	{
		delay();
 80017ee:	f7ff fe59 	bl	80014a4 <delay>
		mssg[0] = '8';
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80017f4:	2238      	movs	r2, #56	; 0x38
 80017f6:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C3 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_10)))
 80017fe:	210a      	movs	r1, #10
 8001800:	483a      	ldr	r0, [pc, #232]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001802:	f7ff f8b7 	bl	8000974 <GPIO_ReadFromInputPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <Keypad_Btn_Press+0x1e4>
	{
		delay();
 800180c:	f7ff fe4a 	bl	80014a4 <delay>
		mssg[0] = '9';
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 8001812:	2239      	movs	r2, #57	; 0x39
 8001814:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C4 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_11)))
 800181c:	210b      	movs	r1, #11
 800181e:	4833      	ldr	r0, [pc, #204]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001820:	f7ff f8a8 	bl	8000974 <GPIO_ReadFromInputPin>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d107      	bne.n	800183a <Keypad_Btn_Press+0x202>
	{
		delay();
 800182a:	f7ff fe3b 	bl	80014a4 <delay>
		mssg[0] = 'C';
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 8001830:	2243      	movs	r2, #67	; 0x43
 8001832:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
	}

	//Make All rows High
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_0, SET);
 800183a:	2201      	movs	r2, #1
 800183c:	2100      	movs	r1, #0
 800183e:	482b      	ldr	r0, [pc, #172]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001840:	f7ff f8ae 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_1, SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2101      	movs	r1, #1
 8001848:	4828      	ldr	r0, [pc, #160]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800184a:	f7ff f8a9 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_2, SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2102      	movs	r1, #2
 8001852:	4826      	ldr	r0, [pc, #152]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001854:	f7ff f8a4 	bl	80009a0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_3, SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2103      	movs	r1, #3
 800185c:	4823      	ldr	r0, [pc, #140]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800185e:	f7ff f89f 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Make R3 Row Low
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_3, RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2103      	movs	r1, #3
 8001866:	4821      	ldr	r0, [pc, #132]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001868:	f7ff f89a 	bl	80009a0 <GPIO_WriteToOutputPin>

	//Scanning for C1 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_8)))
 800186c:	2108      	movs	r1, #8
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 8001870:	f7ff f880 	bl	8000974 <GPIO_ReadFromInputPin>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d107      	bne.n	800188a <Keypad_Btn_Press+0x252>
	{
		delay();
 800187a:	f7ff fe13 	bl	80014a4 <delay>
		mssg[0] = '*';
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 8001880:	222a      	movs	r2, #42	; 0x2a
 8001882:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C2 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_9)))
 800188a:	2109      	movs	r1, #9
 800188c:	4817      	ldr	r0, [pc, #92]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 800188e:	f7ff f871 	bl	8000974 <GPIO_ReadFromInputPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <Keypad_Btn_Press+0x270>
	{
		delay();
 8001898:	f7ff fe04 	bl	80014a4 <delay>
		mssg[0] = '0';
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 800189e:	2230      	movs	r2, #48	; 0x30
 80018a0:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C3 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_10)))
 80018a8:	210a      	movs	r1, #10
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80018ac:	f7ff f862 	bl	8000974 <GPIO_ReadFromInputPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <Keypad_Btn_Press+0x28e>
	{
		delay();
 80018b6:	f7ff fdf5 	bl	80014a4 <delay>
		mssg[0] = '#';
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80018bc:	2223      	movs	r2, #35	; 0x23
 80018be:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
	}
	//Scanning for C4 Column
	if(!(GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_11)))
 80018c6:	210b      	movs	r1, #11
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <Keypad_Btn_Press+0x2b4>)
 80018ca:	f7ff f853 	bl	8000974 <GPIO_ReadFromInputPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <Keypad_Btn_Press+0x2ac>
	{
		delay();
 80018d4:	f7ff fde6 	bl	80014a4 <delay>
		mssg[0] = 'D';
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80018da:	2244      	movs	r2, #68	; 0x44
 80018dc:	701a      	strb	r2, [r3, #0]
		BtnPrsd = 1;
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <Keypad_Btn_Press+0x2bc>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
	}
	return mssg[0];
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <Keypad_Btn_Press+0x2b8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	20000054 	.word	0x20000054
 80018f4:	20000055 	.word	0x20000055

080018f8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <USART2_IRQHandler+0x10>)
 80018fe:	f7ff fbd5 	bl	80010ac <USART_IRQHandling>
	//USART_ReceiveData(&usart2_handle, (uint8_t *)msg, 1);
	//LCD_Data((uint8_t)*msg);
	//delayMs(200);
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000030 	.word	0x20000030

0800190c <USART_ApplicationEventCallback>:
void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t event)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
	if( event == USART_EVENT_RX_CMPLT)
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <USART_ApplicationEventCallback+0x22>
	{
		LCD_Data((uint8_t)*msg);
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <USART_ApplicationEventCallback+0x2c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fc7e 	bl	8000224 <LCD_Data>
		delayMs(200);
 8001928:	20c8      	movs	r0, #200	; 0xc8
 800192a:	f7fe fc5d 	bl	80001e8 <delayMs>
	}
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000058 	.word	0x20000058

0800193c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800193e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001940:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <LoopForever+0x6>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <LoopForever+0xe>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	; (8001988 <LoopForever+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800196a:	f000 f811 	bl	8001990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196e:	f7ff fd3f 	bl	80013f0 <main>

08001972 <LoopForever>:

LoopForever:
    b LoopForever
 8001972:	e7fe      	b.n	8001972 <LoopForever>
  ldr   r0, =_estack
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001980:	080019f8 	.word	0x080019f8
  ldr r2, =_sbss
 8001984:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001988:	2000005c 	.word	0x2000005c

0800198c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <__libc_init_array>:
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	4d0d      	ldr	r5, [pc, #52]	; (80019c8 <__libc_init_array+0x38>)
 8001994:	4c0d      	ldr	r4, [pc, #52]	; (80019cc <__libc_init_array+0x3c>)
 8001996:	1b64      	subs	r4, r4, r5
 8001998:	10a4      	asrs	r4, r4, #2
 800199a:	2600      	movs	r6, #0
 800199c:	42a6      	cmp	r6, r4
 800199e:	d109      	bne.n	80019b4 <__libc_init_array+0x24>
 80019a0:	4d0b      	ldr	r5, [pc, #44]	; (80019d0 <__libc_init_array+0x40>)
 80019a2:	4c0c      	ldr	r4, [pc, #48]	; (80019d4 <__libc_init_array+0x44>)
 80019a4:	f000 f818 	bl	80019d8 <_init>
 80019a8:	1b64      	subs	r4, r4, r5
 80019aa:	10a4      	asrs	r4, r4, #2
 80019ac:	2600      	movs	r6, #0
 80019ae:	42a6      	cmp	r6, r4
 80019b0:	d105      	bne.n	80019be <__libc_init_array+0x2e>
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
 80019b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019b8:	4798      	blx	r3
 80019ba:	3601      	adds	r6, #1
 80019bc:	e7ee      	b.n	800199c <__libc_init_array+0xc>
 80019be:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c2:	4798      	blx	r3
 80019c4:	3601      	adds	r6, #1
 80019c6:	e7f2      	b.n	80019ae <__libc_init_array+0x1e>
 80019c8:	080019f0 	.word	0x080019f0
 80019cc:	080019f0 	.word	0x080019f0
 80019d0:	080019f0 	.word	0x080019f0
 80019d4:	080019f4 	.word	0x080019f4

080019d8 <_init>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	bf00      	nop
 80019dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019de:	bc08      	pop	{r3}
 80019e0:	469e      	mov	lr, r3
 80019e2:	4770      	bx	lr

080019e4 <_fini>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	bf00      	nop
 80019e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ea:	bc08      	pop	{r3}
 80019ec:	469e      	mov	lr, r3
 80019ee:	4770      	bx	lr
